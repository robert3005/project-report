Introduction

    We want to use Python due to widespread use in research field.
    The problem - Python (CPython) isn't truly multithreaded
        CPython (interpreter in use) has GIL
            other implementations would be difficult to embed in C/Fortran code base

    State contributions
        1. Familiar syntax
        2. Same performance as pure C
        3. Allows for multithreading and can be deployed in real life applications


Background
    Current state of the field
        METAMODELS - spatial and agent based models
        VEW suite idea
        Planktonica - we can use code generation
        PHYSICAL model limitations - 1D VEW model
        FLUIDITY - CFD What a problems with mesh based model
        Move to 3D model - VEW integration
        Explain openmp - briefly (with references to code generated by compiler)
        Scalability through openmpi and openmp

        Python scripting - cannot use openmp due to memory model restrictions


Idea - use Cython!
    1. similar syntax to python (not quite python)
    2. should allow for multithreading

    actual limitations comes from CPython garbage collection


Evaluation
    - Performance model (chem + phys + agents/threads)

    Optimization progression

    1. Pure cython bindings with data copying python <-> C
        bottleneck due to python interpreter performance

    2. Using Cython type annotations to generate more C instead of python
        Not quite python
        single threaded

    3. c++ bindings via std::map and std::unordered_map
        need to rewrite function definitions but not the function code
        preserves python read/write semantics
        explain map vs unordered_map
        copy free
        n times faster than pure python - most time spent referencing values of dictionaries

    4. rewriting dictionary to array
        need to modify code to change string identifiers to indices
            which is only known at runtime
        n times performance improvement over std::unordered_map
        as fast as pure c version

    Correctness
        per thread global variables - cache contention (L3 cache roundtrips)
            environment management
            rand seed

    5. Fluidity (might need to leave out)
        Implementation issue
            runtime code generation
            runtime code discovery/loading
        Current implementation with Python
            threading problem
        Performance comparison


Related Work
    PyPy STM - still not fully working
    pyparallel - only suitable for I/O
    Julia - still new and untested

    multithreaded python interpreter like Jython or IronPython
        No easy way to embed them in C
        different than CPython


Conclusion
    Ability to easily mix python and c
    Putting constraints on expressiveness eliminates python stdlib
        but allows for multithreading

    Achieve on par performance with c code since the result of the process is a similar c code

    Fine grained locking in CPython would be good solution - not likely to happen
        all benefits of python and multithreading
        possibly slower due to python semantics - python doesn't have primitive types

    PyPy STM seems to be a serious future solution
